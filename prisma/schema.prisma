// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  name          String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  normalizedEmail String?

  stripeCustomerId String?

  @@unique([normalizedEmail])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Subscription {
  id                   String    @id
  plan                 String
  referenceId          String
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               String?
  periodStart          DateTime?
  periodEnd            DateTime?
  cancelAtPeriodEnd    Boolean?
  seats                Int?

  @@map("subscription")
}

model Order {
  id                      String         @id @default(uuid()) 
  totalAmount             Int
  status                  String         @default("pending")
  stripeCheckoutSessionId String         
  deliveryAddress         String?
  deliveryFee             Int            @default(299)
  orderItems              OrderItem[]
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt

  @@map("order")
}

model OrderItem {
  id          String       @id @default(uuid())
  orderId     String
  order       Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  pizzaName   String
  pizzaSize   String
  quantity    Int          @default(1)
  unitPrice   Int
  totalPrice  Int
  toppings    OrderItemTopping[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("order_item")
}

model Topping {
  id          String             @id @default(uuid())
  name        String
  price       Int
  orderItems  OrderItemTopping[]

  @@map("topping")
}

model OrderItemTopping {
  id          String    @id @default(uuid())
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  orderItemId String
  topping     Topping   @relation(fields: [toppingId], references: [id], onDelete: Cascade)
  toppingId   String

  @@unique([orderItemId, toppingId])
  @@map("order_item_topping")
}
